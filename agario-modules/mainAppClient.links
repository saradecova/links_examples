open Util.Lists
open Util.Conversions
open Util.Colour
open Render
open Logic

### EVENT LISTENERS
fun on_mousemove(e) {
    var cursor = (getPageX(e), getPageY(e));
    store_int("cursor_x", cursor.1);
    store_int("cursor_y", cursor.2);
}
# regualarly gets position of the cursor and sends it to the main_game_loop
fun cursor_loop(gameHandler, prev_time:Int) client {
  var curr_time = getTime(event);
  if (curr_time - prev_time > 30) {
    var cursor = Cursor(
      switch(get_int("cursor_x")) { case Just(x) -> x
                                    case Nothing -> gameWidth/2 },
      switch(get_int("cursor_y")) { case Just(y) -> y
                                    case Nothing -> gameHeight/2 }
    );
    gameHandler ! Navigate(cursor);
    cursor_loop(gameHandler, curr_time)
  } else {
    cursor_loop(gameHandler, prev_time)
  }
}

# main loop. receives cursor position, generates a new GameState and sends
# it to the drawing routine
fun main_game_loop(player_id, drawHandler, game_state) client {
  receive {
    case Navigate(cursor_input:Input) ->
       var game_state_new = update_logic(game_state, player_id, cursor_input);
       var in_game = isJust(lsDictLookup(player_id, game_state.players));
       drawHandler ! Draw(in_game, game_state_new);
       main_game_loop(player_id, drawHandler, game_state_new)
    case UpdatePlayers(new_players) ->
       var game_state_new = (game_state with players=new_players);
       main_game_loop(player_id, drawHandler, game_state_new)
    case GetState(pid) ->
      var player_state_maybe = lsDictLookup(player_id, game_state.players);
      # pid ! (player_id, player_state_maybe);
      main_game_loop(player_id, drawHandler, game_state)
  }
}

# redraws board based on a new gameState sent by main_game_loop()
fun draw_game_loop(player_id) client {
  receive {
    case Draw(in_game:Bool, new_game_state:GameState) ->
      if(in_game) draw(player_id, new_game_state) else ();
      draw_game_loop(player_id)
  }
}

fun server_handler_loop(update_channel:(~UpdatePlayerChannel),
                        gameHandler, prev_time) client {
  print("prev_time: "^^intToString(prev_time));
  var curr_time = getTime(event);
  if (curr_time - prev_time > 50) {
    # Get player id and state from the main loop and send them over to server.
    # The server then replies with up to date info for all players
    # Update main game loop with new player states.
    var (player_id, player_state_maybe:Maybe(PlayerState)) =
    spawnWait { gameHandler ! GetState(self()); receive { case x -> x }};
    if (isJust(player_state_maybe)) {
      var player_state = fromJust(player_state_maybe);
      var update_channel = send((player_id, player_state), update_channel);
      var (players:([(Int, PlayerState)]), update_channel) =
        receive(update_channel);
      gameHandler ! UpdatePlayers(players);
      server_handler_loop(update_channel:(~UpdatePlayerChannel), gameHandler, curr_time)
    } else {
      # If a player wasn't found, ignore.
      server_handler_loop(update_channel, gameHandler, prev_time)
    }
  } else {
    sleep(25);
    server_handler_loop(update_channel, gameHandler, prev_time)
  }
}

fun initialize(player_name:String, ap) client {
  fun client_setup(s) {
    debug("starting client setup");
    replaceNode(<div id="container" tabindex="1">
                    <canvas id="{canvas1}" height="{itos(screenHeight)}" width="{itos(screenWidth)}"/>
                    <canvas id="{canvas2}" height="{itos(screenHeight)}" width="{itos(screenWidth)}"/>
                </div>,
                getNodeById("container"));
    var (player_id, s) = receive(s);
    debug("received player id: "^^intToString(player_id));

    var init_game:GameState = initial_game_state(player_name, player_id);
    var player_state:PlayerState = lsHead(init_game.players).2;
    var update_channel = send(player_state, s);

    var drawHandler = spawnClient { draw_game_loop(player_id) };

    # start of the client handler
    var gameHandler =
       spawnClient { main_game_loop(player_id, drawHandler, init_game)};

    var _ = spawnClient { server_handler_loop(update_channel,
                                      gameHandler, getTime(event)) };

    jsSetOnEvent(getNodeById("container"), "mousemove", on_mousemove, true);

    #  cursor tracking loop
    var _ = spawnClient { cursor_loop(gameHandler, getTime(event)) };

    ()
  }
  debug("start client init");
  var s = request(ap);
  debug("ap requested");
  var _ = spawnClient { client_setup(s) };
  ()
}

fun mainPage(acc_point) {
    page
        <html>
            <head>
                <title>Agar.io</title>
                <style>
                    body {{
                        margin: 0;
                    }}
                    #{stringToXml(canvas1)} {{
                        display: none;
                        position: absolute;
                        top: 0px;
                        left: 0px;
                    }}
                    #{stringToXml(canvas2)} {{
                        display: block;
                        position: absolute;
                        top: 0px;
                        left: 0px;
                    }}
                    #{stringToXml("container")} {{
                        position: relative;
                        width: {stringToXml(itos(screenWidth))}px;
                        height: {stringToXml(itos(screenHeight))}px;
                    }}
                    #name_form {{
                        position: relative;
                        left: {stringToXml(itos(screenWidth/2))}px;
                        top: {stringToXml(itos(screenHeight/2))}px;
                    }}
                </style>
            </head>
            <body>
                <div id="container">
                    <div id="name_form">
                        Agar.io
                        <form l:onsubmit="{initialize(player_name, acc_point) }">
                            <input type="text" l:name="player_name" autofocus="autofocus"/>
                        </form>
                    </div>
                </div>

                <div id="{state_node_id}" style="display:none;" ></div>

            </body>
        </html>
}
