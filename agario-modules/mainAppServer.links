open Util.Lists
open Render
open Logic
open MainAppClient

fun players_manager(players) {
  receive {
    case Update(player_id, player:PlayerState) ->
      players_manager(update_players(player_id, player, players))
  }
}

fun server_sender_ping(sendChannel, prev_time) {
  var curr_time = getTime(event);
  if (curr_time - prev_time > 30) {
    # broadcast state to all users
    server_sender_ping(sendChannel, curr_time)
  } else {
    server_sender_ping(sendChannel, prev_time)
  }
}

fun server_rec_ping(recChannel:UpdatePlayerChannel) {
  var (player_id, recChannel) = receive(recChannel);
  var (player:PlayerState, recChannel) = receive(recChannel);
  # update overall game state_node
 server_rec_ping(recChannel)
}


fun main() {
  var clientAP = new();

  var gameManager = spawn { players_manager([]) };
  # var _ = spawn { clientAcceptor(clientAP, loopPid) };
  addRoute("/", fun (_, _) { MainAppClient.mainPage(clientAP) } );
  addStaticRoute("/css", "css", [("css", "text/css")]);
  serveWebsockets();
  servePages()
}

main()
