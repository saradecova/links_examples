open Util.Lists
open Render
open Logic
open MainAppClient
open ServerLogic

# keeps truck of all players, their states and channel on which the server
# communicates with them
fun players_manager(players, new_id) {

  receive {
    case Update(player_id, player) ->
      players_manager(dictUpdate(player_id, player, players), new_id)
    case Add(player_id:Int, player:PlayerState) ->
      debug("leaving add");
      players_manager(((player_id, player))::players, new_id)
    case GeneratePlayerId(pid) ->
      print("In generate");
      pid ! new_id;
      players_manager(players, new_id+1)
  }
}

fun handle_pings(channel:UpdatePlayerChannel) {
  var (x, channel) = receive(channel);
  handle_pings(send([x], channel));
}

fun setup(s:InitiateGame, manager) {
  fun clientHandler(serverToClientRecvEnd, initGameChannel) {
    var _ = send(serverToClientRecvEnd, initGameChannel);
    debug("sent channel");
    ()
  }

  debug("starting setup");
  # send new player id.
  var player_id = spawnWait { manager ! GeneratePlayerId(self());
                              receive { case n -> n }};
  debug("got player id: "^^intToString(player_id));
  var s = send(player_id, s);

  #  Get client's initial state. (is same for every client so should be
  #  generated at the server. TODO: rewrite initial_game_state funtion so it
  #  does not use pure client-side functions and can bu run on server).
  var (player_state:PlayerState, s) = receive(s);
  debug("received player's state");
  manager ! Add(player_id, player_state);
  var _ = spawn { handle_pings(s) };
  ()
}

fun client_acceptor(ap, manager) {
  var s = accept(ap);
  var _ = spawn { setup(s, manager) };
  client_acceptor(ap, manager)
}

fun main() {
  var clientAP = new();

  var gameManager = spawn { players_manager([], 1) };
  var acc = spawn { client_acceptor(clientAP, gameManager) };
  var server_time = serverTime();
  debug("got server_time");
  addRoute("/", fun (_, _) { MainAppClient.mainPage(clientAP) } );
  addStaticRoute("/css", "css", [("css", "text/css")]);
  serveWebsockets();
  servePages()
}

main()
