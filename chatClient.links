open ChatSessions

module DomFunctions {
  var nickname_box_id = "name_box";
  var chat_box_id = "chat_box";

  fun getInputContents(dom_id) {
    var textNode = getNodeById(dom_id);
    domGetPropertyFromRef(textNode, "value")
  }

  fun clearInput(dom_id) {
    var textNode = getNodeById(dom_id);
    var _ = domSetPropertyFromRef(textNode, "value", "");
    ()
  }

}
open DomFunctions

module Components {
  fun displayChatBox(topic, nicks, incomingMsgChan, outgoingMsgChan) {
    var Topic(topicStr) = topic;

    fun addToMsgBox(xml) {
      var msgsNode = getNodeById("msgs");
      appendChildren(xml, msgsNode);
      var scrollHeight = domGetPropertyFromRef(msgsNode, "scrollHeight");
      var _ = domSetPropertyFromRef(msgsNode, "scrollTop", scrollHeight);
      ()
    }

    fun addChatMsg(nick, msg) {
      var to_add = <#><p><b>{stringToXml(nick)}</b>: {stringToXml(msg)}</p></#>;
      addToMsgBox(to_add)
    }

    fun addNewUser(nick) {
      var to_add = <#><p><b>{stringToXml(nick)}</b> just joined</p></#>;
      addToMsgBox(to_add)
    }

    fun changeTopic(topic) {
      var topicNode = getNodeById("topic");
      var to_add = <#><p><span class="lead"><b>Topic: </b>{stringToXml(topic)}</span></p></#>;
      replaceChildren(to_add, topicNode)
    }

    fun removeUser(nick) {
      var to_add = <#><p><b>{stringToXml(nick)}</b> just left</p></#>;
      addToMsgBox(to_add)
    }


    fun incomingMsgLoop(s) {
      offer(s) {
        case IncomingChatMessage(s) ->
          var ((Nickname(nick), Message(chatmsg)), s) = receive(s);
          debug("Received incoming chat message (" ^^ chatmsg ^^ ") from (" ^^ nick ^^ ")");
          addChatMsg(nick, chatmsg);
          incomingMsgLoop(s)
        case NewUser(s) ->
          var (Nickname(nick), s) = receive(s);
          addNewUser(nick);
          incomingMsgLoop(s)
        case NewTopic(s) ->
          var (Topic(topic), s) = receive(s);
          changeTopic(topic);
          incomingMsgLoop(s);
        case UserLeft(s) ->
          var (Nickname(nick), s) = receive(s);
          removeUser(nick); # Poor Nick
          incomingMsgLoop(s)
      }
    }

    fun outgoingMsgLoop(s) {
      fun isTopicCmd(s) {
        (charAt(s, 0) == '/') &&
        (strlen(s) > 8) &&
        (strsub(s, 0, 7) == "/topic ")
      }

      fun getTopic(s) {
        strsub(s, 7, strlen(s) - 7)
      }

      receive {
        case str ->
          if (isTopicCmd(str)) {
            var s = select ChangeTopic s;
            var s = send(Topic(getTopic(str)), s);
            outgoingMsgLoop(s)
          } else {
            var s = select ChatMessage s;
            var s = send(Message(str), s);
            outgoingMsgLoop(s)
          }
      }
    }

    fun chatBox(outgoingHandlerPid) {
      fun handleSubmit() {
        outgoingHandlerPid ! getInputContents(chat_box_id);
        clearInput(chat_box_id)
      }

      <#>
        <div id="chatBox">
          <div id="topic"><p><span class="lead"><b>Topic: </b>{stringToXml(topicStr)}</span></p></div>
          <div id="msgs" style="overflow-y:scroll; width:100%; height:400px;"></div>
          <div>
            <form l:onsubmit="{handleSubmit()}">
              <input id="chat_box" type="text" style="width:100%"></input>
            </form>
          </div>
        </div>
      </#>
    }


    # Firstly, spawn the incoming and outgoing message handlers
    var outgoingHandler = spawnClient { outgoingMsgLoop(outgoingMsgChan) };
    var incomingHandler = spawnClient { incomingMsgLoop(incomingMsgChan) };

    # Finally, remove the name request box, put the chatbox in, and we can get going
    replaceChildren(chatBox(outgoingHandler), getNodeById("main"))
  }

  fun nameBox(channel) {
    fun handleSubmitName(s) {
        var nick = getInputContents(nickname_box_id);
        clearInput(nickname_box_id);
        var s = send(Nickname(nick), s);
        print("sent nickname");
        var ((topic, nicks, incomingMsgChan), s) = receive(s);
        print("received data");
        displayChatBox(topic, nicks, incomingMsgChan, s)
    }

    var nameHandler = spawnClient { receive { case _ -> handleSubmitName(channel) } };
    print("Starting nameBox");
    replaceNode(<#>
                  <div id="nameBox">
                    <p>Nickname:</p>
                    <form l:onsubmit="{nameHandler ! ()}">
                      <input id="name_box" type="text"></input>
                    </form>
                  </div>
                </#>,
                getNodeById("roomSelect"))
  }

  fun chooseRoom(ap) {
    fun makeRoomForm(rooms, handlerFn) {
      fun makeRadioRec(rooms) {
            switch(rooms) {
              case [] -> <#/>
              case x::xs ->
                var Room(roomStr) = x;
                <#>
                  <input type="radio" name="room"
                    l:onchange="{ handlerFn ! Room(roomStr)}"/>
                { stringToXml(roomStr) } <br/>
                { makeRadioRec(xs) } </#>
            }
          }
      var radios = makeRadioRec(rooms);
      <#>
      <form id="rooms" l:onsubmit="{ handlerFn ! Submit()}">
          <input id="startButton" type="radio" name="room" checked="checked"
                 l:onchange="{ handlerFn ! Room("\\NewRoom")}"/>New
          <input id="newRoomText" type="text" value=""/><br/>
          <p>
            { makeRadioRec(rooms) }
            <input type="submit" name="submitButton" value="Enter"/>
          </p>
      </form>
      </#>
    }

    fun roomSelectLoop(s, roomStr) {
      receive {
        case Room(newRoomStr) ->
          roomSelectLoop(s, newRoomStr)
        case Submit() ->
          # if the user wants to create a new room, extract the room name
          # from the text field
          if (roomStr == "\\NewRoom") {
            var newRoom = getInputContents("newRoomText");
            # validate newRoom name (if non-empty)
            # TODO: check against existing room names
            if (newRoom == "") {
              print("Please, specify the name of a new room.");
              roomSelectLoop(s, roomStr)
            } else {
              nameBox(send(Room(roomStr), select NewRoom s))
            }
          } else {
            var s = send(Room(roomStr), select ExistingRoom s);
            print("Send exisitng");
            nameBox(s)
          }
        }
    }

    # keeps track of the radio button currently clicked
    # (TODO: extract the information from DomNodes after submission)
    # At submission, sends the roomname to the server and proceeds to name setup
    fun doSetup(roomStr) {
      # On the client, request from the given access point
      var s = request(ap);
      # Next, grab the list of rooms
      var (rooms, s) = receive(s);
      # Spawn the handler function
      var roomHandler = spawnClient { roomSelectLoop(s, roomStr) };

      # Next, populate the placeholder with the received rooms
      var generated_radio_dom = makeRoomForm(rooms, roomHandler);
      debug("about to evaluate replaceNode");
      replaceNode(generated_radio_dom, getNodeById("room_placeholder"));
    }

    # {print("Inside mainpage html"); makeRadioRec(rooms, roomHandler)}
    # get all available rooms from teh server and pick one via radio buttons
    doSetup("\\NewRoom");
  }
}



open Components

fun mainPage(ap) {
  # oh dear, Simon attempts front-end webdev
  var _ = spawnClient { chooseRoom(ap) };
  page
    <html>
      <head>
        <title>Links chat</title>
        <link href="http://fonts.googleapis.com/css?family=Merriweather:400,300italic,300" rel="stylesheet" type="text/css"></link>
        <link href="http://fonts.googleapis.com/css?family=Kotta+One" rel="stylesheet" type="text/css"></link>
        <link href="http://fonts.googleapis.com/css?family=Lora" rel="stylesheet" type="text/css"></link>
        <link href="css/bootstrap.min.css" rel="stylesheet"></link>
        <link href="css/abcd.css" rel="stylesheet"></link>
      </head>

      <div class="navbar-wrapper">
        <div class="container">
          <div id="navbar" class="navbar navbar-inverse navbar-fixed-top" role="navigation">
          </div>
        </div>
      </div>

      <div class ="jumbotron">
        <div class="container">
          <h1>Links Session-Typed Chat</h1>
          <hr>...complete with totally original stylesheet</hr>
        </div>
      </div>


      <div id="main" class="container marketing">
        <div class="row featurette">
          <div id="roomSelect">
            <p> Choose one of the existing rooms or create a new one </p>
                      <div id="room_placeholder"></div>
          </div>
        </div>
      </div>
    </html>
}
